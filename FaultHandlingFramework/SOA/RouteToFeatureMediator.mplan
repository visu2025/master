<?xml version = '1.0' encoding = 'UTF-8'?>
<!--Generated by Oracle SOA Modeler version 1.0 at [1/21/10 10:58 AM].-->
<Mediator name="RouteToFeatureMediator" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" wsdlTargetNamespace="http://xmlns.oracle.com/bpel-300-FaultHandlingFramework/SampleFeatureRouter/RouteToFeatureMediator" xmlns="http://xmlns.oracle.com/sca/1.0/mediator"
          xmlns:cb1="http://www.oracle.com/bpel/samples">
   <operation name="execute" deliveryPolicy="AllOrNothing" priority="4"
              validateSchema="false">
      <switch>
         <case executionType="direct"
               name="Action_ora_retry.action_ora_retry_client.process_2">
            <condition language="xpath">
               <expression>$in.request/cb1:faultFrameworkRequest/faultAction = 'ora-retry'</expression>
            </condition>
            <action>
               <transform>
                  <part name="$out.payload"
                        function="xslt(xsl/faultFrameworkRequest_To_sampleRequest.xsl, $in.request)"/>
               </transform>
               <invoke reference="Action_ora_retry.action_ora_retry_client"
                       operation="process">
                  <onCallback operation="processResponse">
                     <transform>
                        <part name="$out.callback"
                              function="xslt(xsl/sampleResponse_To_faultFrameworkResponse.xsl, $in.payload)"/>
                     </transform>
                     <callback operation="callback"/>
                  </onCallback>
                  <onCallbackTimeout duration="PT1M">
                     <transform>
                        <part name="$out.callback"
                              function="xslt(xsl/faultFrameworkRequest_To_faultFrameworkResponse.xsl, $in.request)"/>
                     </transform>
                     <callback operation="callback"/>
                  </onCallbackTimeout>
               </invoke>
            </action>
         </case>
         <case executionType="direct"
               name="Action_ora_human_intervention.action_ora_human_intervention_client.process">
            <condition language="xpath">
               <expression>$in.request/cb1:faultFrameworkRequest/faultAction = 'ora-human-intervention'</expression>
            </condition>
            <action>
               <transform>
                  <part name="$out.payload"
                        function="xslt(xsl/faultFrameworkRequest_To_sampleRequest.xsl, $in.request)"/>
               </transform>
               <invoke reference="Action_ora_human_intervention.action_ora_human_intervention_client"
                       operation="process">
                  <onCallback operation="processResponse">
                     <transform>
                        <part name="$out.callback"
                              function="xslt(xsl/sampleResponse_To_faultFrameworkResponse.xsl, $in.payload)"/>
                     </transform>
                     <callback operation="callback"/>
                  </onCallback>
                  <onCallbackTimeout duration="PT10M">
                     <transform>
                        <part name="$out.callback"
                              function="xslt(xsl/faultFrameworkRequest_To_faultFrameworkResponse.xsl, $in.request)"/>
                     </transform>
                     <callback operation="callback"/>
                  </onCallbackTimeout>
               </invoke>
            </action>
         </case>
         <case executionType="direct"
               name="Action_ora_terminate.action_ora_terminate_client.process">
            <condition language="xpath">
               <expression>$in.request/cb1:faultFrameworkRequest/faultAction = 'ora-terminate'</expression>
            </condition>
            <action>
               <transform>
                  <part name="$out.payload"
                        function="xslt(xsl/faultFrameworkRequest_To_sampleRequest.xsl, $in.request)"/>
               </transform>
               <invoke reference="Action_ora_terminate.action_ora_terminate_client"
                       operation="process">
                  <onCallback operation="processResponse">
                     <transform>
                        <part name="$out.callback"
                              function="xslt(xsl/sampleResponse_To_faultFrameworkResponse.xsl, $in.payload)"/>
                     </transform>
                     <callback operation="callback"/>
                  </onCallback>
                  <onCallbackTimeout duration="PT10S">
                     <transform>
                        <part name="$out.callback"
                              function="xslt(xsl/faultFrameworkRequest_To_faultFrameworkResponse.xsl, $in.request)"/>
                     </transform>
                     <callback operation="callback"/>
                  </onCallbackTimeout>
               </invoke>
            </action>
         </case>
         <case executionType="direct"
               name="Action_ora_rethrow_fault.action_ora_rethrow_fault_client.process">
            <condition language="xpath">
               <expression>$in.request/cb1:faultFrameworkRequest/faultAction = 'ora-rethrow-fault'</expression>
            </condition>
            <action>
               <transform>
                  <part name="$out.payload"
                        function="xslt(xsl/faultFrameworkRequest_To_sampleRequest.xsl, $in.request)"/>
               </transform>
               <invoke reference="Action_ora_rethrow_fault.action_ora_rethrow_fault_client"
                       operation="process">
                  <onCallback operation="processResponse">
                     <transform>
                        <part name="$out.callback"
                              function="xslt(xsl/sampleResponse_To_faultFrameworkResponse.xsl, $in.payload)"/>
                     </transform>
                     <callback operation="callback"/>
                  </onCallback>
               </invoke>
            </action>
         </case>
         <case executionType="direct"
               name="Action_ora_replay_scope.action_ora_replay_scope_client.process">
            <condition language="xpath">
               <expression>$in.request/cb1:faultFrameworkRequest/faultAction = 'ora-replay-scope'</expression>
            </condition>
            <action>
               <transform>
                  <part name="$out.payload"
                        function="xslt(xsl/faultFrameworkRequest_To_sampleRequest.xsl, $in.request)"/>
               </transform>
               <invoke reference="Action_ora_replay_scope.action_ora_replay_scope_client"
                       operation="process">
                  <onCallback operation="processResponse">
                     <transform>
                        <part name="$out.callback"
                              function="xslt(xsl/sampleResponse_To_faultFrameworkResponse.xsl, $in.payload)"/>
                     </transform>
                     <callback operation="callback"/>
                  </onCallback>
               </invoke>
            </action>
         </case>
         <case executionType="direct"
               name="Action_ora_java.action_ora_java_client.process">
            <condition language="xpath">
               <expression>$in.request/cb1:faultFrameworkRequest/faultAction = 'ora-java'</expression>
            </condition>
            <action>
               <transform>
                  <part name="$out.payload"
                        function="xslt(xsl/faultFrameworkRequest_To_sampleRequest.xsl, $in.request)"/>
               </transform>
               <invoke reference="Action_ora_java.action_ora_java_client"
                       operation="process">
                  <onCallback operation="processResponse">
                     <transform>
                        <part name="$out.callback"
                              function="xslt(xsl/sampleResponse_To_faultFrameworkResponse.xsl, $in.payload)"/>
                     </transform>
                     <callback operation="callback"/>
                  </onCallback>
               </invoke>
            </action>
         </case>
         <case executionType="direct"
               name="FaultGeneratorBPELProcess.faultgeneratorbpelprocess_client.process">
            <condition language="xpath">
               <expression>$in.request/cb1:faultFrameworkRequest/faultAction = 'mediator'</expression>
            </condition>
            <action>
               <transform>
                  <part name="$out.payload"
                        function="xslt(xsl/faultFrameworkRequest_To_sampleRequest.xsl, $in.request)"/>
               </transform>
               <invoke reference="FaultGeneratorBPELProcess.faultgeneratorbpelprocess_client"
                       operation="process">
                  <onReply>
                     <transform>
                        <part name="$out.callback"
                              function="xslt(xsl/sampleResponse_To_faultFrameworkResponse.xsl, $in.payload)"/>
                     </transform>
                     <callback operation="callback"/>
                  </onReply>
                  <onFault type="runtimeFault"/>
               </invoke>
            </action>
         </case>
         <case executionType="direct"
               name="Throw_vs_Reply.throw_vs_reply_client.process">
            <condition language="xpath">
               <expression>$in.request/cb1:faultFrameworkRequest/faultAction = 'throw-vs-reply'</expression>
            </condition>
            <action>
               <transform>
                  <part name="$out.payload"
                        function="xslt(xsl/faultFrameworkRequest_To_sampleRequest.xsl, $in.request)"/>
               </transform>
               <invoke reference="Throw_vs_Reply.throw_vs_reply_client"
                       operation="process">
                  <onCallback operation="processResponse">
                     <transform>
                        <part name="$out.callback"
                              function="xslt(xsl/sampleResponse_To_faultFrameworkResponse.xsl, $in.payload)"/>
                     </transform>
                     <callback operation="callback"/>
                  </onCallback>
               </invoke>
            </action>
         </case>
         <case executionType="direct"
               name="Throw_vs_Reply.throw_vs_reply_client.process_2">
            <condition language="xpath">
               <expression>$in.request/cb1:faultFrameworkRequest/faultAction = 'reply-with-fault'</expression>
            </condition>
            <action>
               <transform>
                  <part name="$out.payload"
                        function="xslt(xsl/faultFrameworkRequest_To_sampleRequest.xsl, $in.request)"/>
               </transform>
               <invoke reference="Throw_vs_Reply.throw_vs_reply_client"
                       operation="process">
                  <onCallback operation="processResponse">
                     <transform>
                        <part name="$out.callback"
                              function="xslt(xsl/sampleResponse_To_faultFrameworkResponse.xsl, $in.payload)"/>
                     </transform>
                     <callback operation="callback"/>
                  </onCallback>
               </invoke>
            </action>
         </case>
      </switch>
   </operation>
</Mediator>
