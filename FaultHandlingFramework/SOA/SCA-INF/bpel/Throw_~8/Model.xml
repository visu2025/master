<?xml version = '1.0' encoding = 'UTF-8'?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Wed Apr 14 14:51:52 MDT 2010
  Author:  greg
  Purpose: Asynchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--><process name="Throw_vs_Reply" targetNamespace="http://xmlns.oracle.com/bpel_300_FaultHandlingFramework_jws/SampleFeatureRouter/Throw_vs_Reply" xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:client="http://xmlns.oracle.com/bpel_300_FaultHandlingFramework_jws/SampleFeatureRouter/Throw_vs_Reply" xmlns:ora="http://schemas.oracle.com/xpath/extension" xmlns:bpelx="http://schemas.oracle.com/bpel/extension" xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:ns1="http://xmlns.oracle.com/bpel_300_FaultHandlingFramework_jws/SampleFeatureRouter/FaultGeneratorBPELProcess" xmlns:ns2="http://xmlns.oracle.com/FaultHandlingFrameworkSample" id="BpPrc0">

    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        PARTNERLINKS                                                      
        List of services participating in this BPEL process               
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <bpelx:annotation>
        <bpelx:analysis>
            <bpelx:property name="wsdlFile">
                Throw_vs_Reply.wsdl
            </bpelx:property>
        </bpelx:analysis>
    </bpelx:annotation>
    <partnerLinks>
        <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
        <partnerLink name="throw_vs_reply_client" partnerLinkType="client:Throw_vs_Reply" myRole="Throw_vs_ReplyProvider" partnerRole="Throw_vs_ReplyRequester"/>
        <partnerLink name="FaultGeneratorBPELProcess.faultgeneratorbpelprocess_client" partnerRole="FaultGeneratorBPELProcessProvider" partnerLinkType="ns1:FaultGeneratorBPELProcess"/>
    </partnerLinks>

    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        VARIABLES                                                        
        List of messages and XML documents used within this BPEL process 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <variables>
        <!-- Reference to the message passed as input during initiation -->
        <variable name="inputVariable" messageType="client:Throw_vs_ReplyRequestMessage"/>

        <!-- Reference to the message that will be sent back to the requester during callback -->
        <variable name="outputVariable" messageType="client:Throw_vs_ReplyResponseMessage"/>
        <variable name="InvokeFaultGenerator_InputVariable" messageType="ns1:FaultGeneratorBPELProcessRequestMessage"/>
        <variable name="InvokeFaultGenerator_OutputVariable" messageType="ns1:FaultGeneratorBPELProcessResponseMessage"/>
    </variables>
    <faultHandlers id="BpFhs0">
        <catchAll id="BpCAl0">
            <sequence id="BpSeq0">
                <assign name="AssignCatchallResponse" id="BpAss0">
                    <copy>
                        <from variable="inputVariable" part="payload" query="/ns2:sampleRequest/ns2:request"/>
                        <to variable="outputVariable" part="payload" query="/ns2:sampleResponse/ns2:sampleType"/>
                    </copy>
                    <copy>
                        <from expression="'Unhandled Exception ... Catch All'"/>
                        <to variable="outputVariable" part="payload" query="/ns2:sampleResponse/ns2:responseMessage"/>
                    </copy>
                </assign>
                <invoke name="callbackFromCatchAll" inputVariable="outputVariable" partnerLink="throw_vs_reply_client" portType="client:Throw_vs_ReplyCallback" operation="processResponse" id="BpInv0"/>
            </sequence>
        </catchAll>
    </faultHandlers>

    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
       ORCHESTRATION LOGIC                                               
       Set of activities coordinating the flow of messages across the    
       services integrated within this business process                  
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <sequence name="main" id="BpSeq1">
        <!-- Receive input from requestor. (Note: This maps to operation defined in Throw_vs_Reply.wsdl) -->
        <receive name="receiveInput" partnerLink="throw_vs_reply_client" portType="client:Throw_vs_Reply" operation="process" variable="inputVariable" createInstance="yes" id="BpRcv0"/>

        <scope name="ScopeForInvoke" id="BpScp0">
            <variables>
                <variable name="runtimeFaultVar" messageType="bpelx:RuntimeFaultMessage"/>
            </variables>
            <faultHandlers id="BpFhs1">
                <catch faultName="ns1:runtimeFault" faultVariable="runtimeFaultVar" id="BpCFt0">
                    <sequence id="BpSeq2">
                        <assign name="AssignForInvoke" id="BpAss1">
                            <copy>
                                <from variable="inputVariable" part="payload" query="/ns2:sampleRequest/ns2:request"/>
                                <to variable="InvokeFaultGenerator_InputVariable" query="/ns2:sampleRequest/ns2:request" part="payload"/>
                            </copy>
                        </assign>
                        <invoke name="InvokeFaultGenerator-ShouldTimeout" inputVariable="InvokeFaultGenerator_InputVariable" outputVariable="InvokeFaultGenerator_OutputVariable" partnerLink="FaultGeneratorBPELProcess.faultgeneratorbpelprocess_client" portType="ns1:FaultGeneratorBPELProcess" operation="process" id="BpInv1"/>
                    </sequence>
                </catch>
            </faultHandlers>
            <sequence id="BpSeq3">
                <assign name="AssignForInvoke-FaultViaReply" id="BpAss2">
                    <copy>
                        <from expression="'reply-with-fault'"/>
                        <to variable="InvokeFaultGenerator_InputVariable" part="payload" query="/ns2:sampleRequest/ns2:request"/>
                    </copy>
                </assign>
                <invoke name="InvokeFaultGenerator-FaultViaReply" inputVariable="InvokeFaultGenerator_InputVariable" outputVariable="InvokeFaultGenerator_OutputVariable" partnerLink="FaultGeneratorBPELProcess.faultgeneratorbpelprocess_client" portType="ns1:FaultGeneratorBPELProcess" operation="process" id="BpInv2"/>
            </sequence>
        </scope>
        <assign name="AssignResponse" id="BpAss3">
            <copy>
                <from variable="inputVariable" part="payload" query="/ns2:sampleRequest/ns2:request"/>
                <to variable="outputVariable" part="payload" query="/ns2:sampleResponse/ns2:sampleType"/>
            </copy>
            <copy>
                <from expression="concat('This was a Fault Management Frameworks Sample for ', bpws:getVariableData('inputVariable','payload','/ns2:sampleRequest/ns2:request'))"/>
                <to variable="outputVariable" part="payload" query="/ns2:sampleResponse/ns2:responseMessage"/>
            </copy>
        </assign>

        <!-- 
          Asynchronous callback to the requester. (Note: the callback location and correlation id is transparently handled using WS-addressing.)
        -->
        <invoke name="callbackClient" partnerLink="throw_vs_reply_client" portType="client:Throw_vs_ReplyCallback" operation="processResponse" inputVariable="outputVariable" id="BpInv3"/>
    </sequence>
</process>